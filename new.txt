from flask import Flask, request, jsonify, render_template, send_file, send_from_directory
from flask_cors import CORS
from base64 import b64decode
import io
import os
from audio_processing import (
    speech_to_text,
    text_to_speech,
    pitch_shifting,
    encrypt_file,
    decrypt_file,
    convert_to_female,
    convert_to_male,
    generate_audio,
    save_audio
)

app = Flask(__name__)
CORS(app)

app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['PROCESSED_FOLDER'] = 'processed'

if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])
if not os.path.exists(app.config['PROCESSED_FOLDER']):
    os.makedirs(app.config['PROCESSED_FOLDER'])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/audio')
def serve_audio():
    return send_from_directory(app.config['UPLOAD_FOLDER'], 'audio.wav')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'audio' not in request.files:
        return jsonify({'success': False, 'message': 'No file part'})

    file = request.files['audio']
    if file.filename == '':
        return jsonify({'success': False, 'message': 'No selected file'})

    filename = file.filename
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(file_path)
    return jsonify({'success': True, 'filename': filename})

@app.route('/process-audio', methods=['POST'])
def process_audio():
    try:
        data = request.get_json()

        if 'audioData' in data:
            audio_data = data['audioData'].split(',')[1]
            audio_binary = b64decode(audio_data)
            audio_file = io.BytesIO(audio_binary)
            audio_file.name = 'audio.webm'
        elif 'audio' in request.files:
            audio_file = request.files['audio']
            if audio_file.filename == '':
                return jsonify({'error': 'No selected file'}), 400
            audio_file.seek(0)
        else:
            return jsonify({'error': 'No audio data provided'}), 400

        action = data.get('action')
        if not action:
            return jsonify({'error': 'No action specified'}), 400

        if action == 'speech_to_text':
            result = speech_to_text(send_from_directory(app.config['UPLOAD_FOLDER'], 'audio.wav'))
            return jsonify({'success': True, 'text': result})

        elif action == 'convert_to_female':
            output_audio = io.BytesIO()
            convert_to_female(audio_file, output_audio)
            output_audio.seek(0)
            return send_file(output_audio, mimetype="audio/wav", as_attachment=True, download_name="female_voice.wav")

        elif action == 'convert_to_male':
            output_audio = io.BytesIO()
            convert_to_male(audio_file, output_audio)
            output_audio.seek(0)
            return send_file(output_audio, mimetype="audio/wav", as_attachment=True, download_name="male_voice.wav")

        elif action == 'pitch_shifting':
            n_steps = int(data.get('n_steps', 0))
            output_audio = io.BytesIO()
            pitch_shifting(audio_file, n_steps, output_audio)
            output_audio.seek(0)
            return send_file(output_audio, mimetype="audio/wav", as_attachment=True, download_name="pitch_shifted.wav")

        elif action == 'encrypt_audio':
            key_path = 'secret.key'
            if not os.path.exists(key_path):
                return jsonify({'error': 'Key file not found'}), 404
            with open(key_path, 'rb') as key_file:
                key = key_file.read()
            output_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], 'encrypted_audio.enc')
            encrypt_audio(audio_file, key_path, output_audio_path)
            return send_file(output_audio_path, mimetype="application/octet-stream", as_attachment=True, download_name="encrypted_audio.enc")

        elif action == 'decrypt_audio':
            key_path = 'secret.key'
            if not os.path.exists(key_path):
                return jsonify({'error': 'Key file not found'}), 404
            with open(key_path, 'rb') as key_file:
                key = key_file.read()
            decrypted_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], 'decrypted_audio.wav')
            decrypt_audio(audio_file, key, decrypted_audio_path)
            return send_file(decrypted_audio_path, mimetype="audio/wav", as_attachment=True, download_name="decrypted_audio.wav")

        else:
            return jsonify({'error': 'Invalid action'}), 400

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/download-processed-audio', methods=['GET'])
def download_processed_audio():
    file_path = os.path.join(app.config['PROCESSED_FOLDER'], 'processed_audio.wav')
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        return jsonify({'error': 'File not found'}), 404

if __name__ == "__main__":
    app.run(debug=True)
